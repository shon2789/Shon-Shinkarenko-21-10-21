{"version":3,"sources":["components/Screen.jsx","services/storage.service.js","services/util.service.js","store/actions/theme.action.js","services/alert.service.js","components/Header.jsx","components/TodayWeather.jsx","services/city.service.js","components/WeatherTopBar.jsx","components/WeeklyWeatherPreview.jsx","components/WeeklyWeather.jsx","components/WeatherContent.jsx","services/weather.service.js","store/actions/weather.action.js","pages/WeatherApp.jsx","components/PreviewFavourites.jsx","components/FavouritesList.jsx","pages/Favourites.jsx","App.js","store/reducers/theme.reducer.js","store/reducers/weather.reducer.js","store/store.js","index.js"],"names":["Screen","isOpen","exitScreen","onClick","className","localStorageService","saveToStorage","key","val","localStorage","setItem","JSON","stringify","loadFromStorage","getItem","parse","removeFromStorage","removeItem","utilService","debounce","func","timer","timeout","args","clearTimeout","setTimeout","apply","getCurrDay","day","Date","getDay","date","getDate","getFormattedDay","epochTime","ferToCel","degrees","toFixed","celToFer","toggleDarkMode","boolean","alertMessage","message","type","duration","store","addNotification","insert","container","animationIn","animationOut","dismiss","onScreen","Header","useState","isMobileMenuToggled","setIsMobileMenuToggled","isDarkMode","useSelector","state","themeModule","dispatch","useDispatch","onToggleDarkMode","to","Tooltip","title","arrow","placement","exact","TodayWeather","isCelcius","currCity","weatherModule","currDate","cityName","src","cityData","WeatherIcon","alt","WeatherText","Temperature","Metric","Value","Imperial","storageKey","apiUrl","process","cityService","query","searchTxt","a","cachedSearch","now","createdAt","Promise","resolve","data","axios","get","searchResults","map","value","Key","label","LocalizedName","country","Country","WeatherTopBar","onChooseCity","onToggleFavourite","isFavourite","setIsCelcius","setSearchResults","inputRef","useRef","changeHandler","ev","target","debouncedChangeHandler","useCallback","onSetDegreesType","onBlur","current","ref","name","onChange","placeholder","res","cityKey","chooseCity","WeeklyWeatherPreview","currDay","icon","temperature","WeeklyWeather","currCityFiveDaysDetails","WeatherContent","currWeatherStorageKey","fiveDaysWeatherStorageKey","favouritesStorageKey","geoLocationStorageKey","apiKey","weatherService","cityCurrentWeatherQuery","cityFiveDaysWeatherQuery","toggleFavourite","favouriteCities","favouriteCitiesQuery","geoLocationQuery","cachedCityWeather","cityDetails","cachedCityFiveDayWeather","cityFiveDaysDetails","DailyForecasts","EpochDate","Minimum","Maximum","Day","Icon","lat","lng","lastGeoLoc","geoLocDetails","detailsObj","loadCityWeather","loadCityFiveDaysWeather","daysData","WeatherApp","setIsfavourite","useParams","search","useLocation","useEffect","defaultLocAlert","split","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","messageId","removeNotification","isToggled","PreviewFavourites","cityInfo","setCityDetails","loadCityData","FavouritesList","setFavouriteCities","Object","entries","length","city","Favourites","App","path","component","initialState","rootReducer","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0ae4a46.chunk.js","sourcesContent":["export const Screen = ({ isOpen, exitScreen }) => {\n\n    return (\n        <div\n            onClick={() => {\n                exitScreen(false)\n            }}\n            className={`screen ${isOpen ? \"screen-active\" : \"\"}`}\n        ></div>\n    )\n}\n","export const localStorageService = {\n    saveToStorage,\n    loadFromStorage,\n    removeFromStorage\n}\n\nfunction saveToStorage(key, val) {\n    localStorage.setItem(key, JSON.stringify(val))\n}\n\nfunction loadFromStorage(key) {\n    const val = localStorage.getItem(key)\n    return JSON.parse(val)\n}\n\nfunction removeFromStorage(key) {\n    localStorage.removeItem(key);\n}","import { localStorageService } from \"./storage.service\";\n\nexport const utilService = {\n    debounce,\n    getCurrDay,\n    getFormattedDay,\n    ferToCel,\n    celToFer,\n    toggleDarkMode\n}\n\nfunction debounce(func, timeout = 0.75) {\n    let timer;\n    return (...args) => {\n        clearTimeout(timer);\n        timer = setTimeout(() => { func.apply(this, args); }, timeout);\n    };\n}\n\n\nfunction getCurrDay() {\n    const days = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT']\n    const day = new Date().getDay()\n    const date = new Date().getDate()\n\n    return {\n        day: days[day],\n        date\n    }\n}\n\n\nfunction getFormattedDay(epochTime) {\n    const days = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT']\n    const date = new Date(epochTime * 1000).getDay()\n\n    return days[date]\n\n}\n\n\nfunction ferToCel(degrees) {\n    return ((5 / 9) * (degrees - 32)).toFixed(1)\n}\n\nfunction celToFer(degrees) {\n    return (degrees * (9 / 5) + 32).toFixed(1)\n}\n\nfunction toggleDarkMode(boolean) {\n    localStorageService.saveToStorage('isDarkMode', boolean)\n}\n","import { utilService } from \"../../services/util.service\"\n\nexport const toggleDarkMode = (boolean) => {\n    return dispatch => {\n        utilService.toggleDarkMode(boolean)\n        dispatch({\n            type: 'SET_THEME',\n        })\n    }\n}","import { store } from 'react-notifications-component';\n\nexport const alertMessage = (message, type, duration = 0) => {\n    return store.addNotification({\n        message,\n        type,\n        insert: \"top\",\n        container: \"top-right\",\n        animationIn: [\"animate__animated\", \"animate__backInRight\"],\n        animationOut: [\"animate__animated\", \"animate__backOutRight\"],\n        dismiss: {\n            duration,\n            onScreen: true\n        }\n    });\n}\n\n\nexport const removeMessage = (messageId) => {\n    store.removeNotification(messageId)\n}","import React, { useState } from 'react'\nimport { Link, NavLink } from 'react-router-dom'\nimport { GiHamburgerMenu } from 'react-icons/gi';\nimport { HiOutlineMoon, HiOutlineSun } from 'react-icons/hi';\nimport { Screen } from './Screen'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleDarkMode } from '../store/actions/theme.action';\nimport Tooltip from '@mui/material/Tooltip';\nimport { alertMessage } from '../services/alert.service';\n\n\nexport const Header = () => {\n    const [isMobileMenuToggled, setIsMobileMenuToggled] = useState(false)\n    const isDarkMode = useSelector(state => state.themeModule.isDarkMode)\n\n    const dispatch = useDispatch()\n\n    const onToggleDarkMode = (boolean) => {\n        setIsMobileMenuToggled(false)\n        dispatch(toggleDarkMode(boolean))\n        alertMessage(`Switched to ${boolean ? 'Dark' : 'Light'} theme`, 'info', 2500)\n    }\n\n\n    return (\n        <header className=\"header main-layout\">\n            <Screen isOpen={isMobileMenuToggled} exitScreen={setIsMobileMenuToggled} />\n            <Link to=\"/\"><h3 className={`${isDarkMode ? 'dark-mode' : ''}`}>WeatherCloud</h3></Link>\n            <nav className={`${isMobileMenuToggled ? 'mobile-menu-active' : ''} ${isDarkMode ? 'dark-mode' : ''} nav-container`}>\n                {isDarkMode ? (isMobileMenuToggled ?\n                    <h4 onClick={() => { onToggleDarkMode(false) }}>Disable dark mode</h4> :\n                    <Tooltip type=\"button\" title=\"Light theme\" arrow placement=\"bottom\">\n                        <div className=\"theme-icon-container\">\n                            <HiOutlineSun className=\"theme-icon\" onClick={() => { onToggleDarkMode(false) }} />\n                        </div>\n                    </Tooltip>)\n                    : (isMobileMenuToggled ?\n                        <h4 onClick={() => { onToggleDarkMode(true) }}>Enable dark mode</h4> :\n                        <Tooltip type=\"button\" title=\"Dark theme\" arrow placement=\"bottom\">\n                            <div className=\"theme-icon-container\">\n                                <HiOutlineMoon className=\"moon-icon theme-icon\" onClick={() => { onToggleDarkMode(true) }} />\n                            </div>\n                        </Tooltip>)}\n\n                <NavLink exact to=\"/\"><div className=\"nav-btn-container\" onClick={() => { setIsMobileMenuToggled(false) }}> Weather</div></NavLink>\n                <NavLink to=\"/favourites\"><div className=\"nav-btn-container\" onClick={() => { setIsMobileMenuToggled(false) }}>Favourites</div></NavLink>\n            </nav>\n            <GiHamburgerMenu onClick={() => { setIsMobileMenuToggled(true) }} className={`${isDarkMode ? 'dark-mode' : ''} mobile-menu-icon`} />\n        </header>\n    )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { utilService } from '../services/util.service'\n\n\nexport const TodayWeather = ({ isCelcius }) => {\n\n    const currCity = useSelector(state => state.weatherModule.currCity)\n    const currDate = utilService.getCurrDay()\n\n\n    if (!currCity) return <h3>Loading..</h3>\n    return (\n        <div className=\"today-weather\">\n            <div className=\"current-day\">\n                <h3>{currDate.day} {currDate.date},</h3>\n                <h3 className=\"current-city\">Today in {currCity.cityName}</h3>\n            </div>\n            <div className=\"current-weather-icon\">\n                <img src={`https://developer.accuweather.com/sites/default/files/${(currCity.cityData.WeatherIcon < 10) ? '0' + currCity.cityData.WeatherIcon : currCity.cityData.WeatherIcon}-s.png`} alt=\"\" />\n                <h4>{currCity.cityData.WeatherText}</h4>\n            </div>\n\n            <div className=\"current-degrees\">\n                <h4>{isCelcius ? currCity.cityData.Temperature.Metric.Value : currCity.cityData.Temperature.Imperial.Value}°</h4>\n            </div>\n        </div>\n    )\n}\n","import axios from \"axios\"\nimport { alertMessage } from \"./alert.service\"\nimport { localStorageService } from \"./storage.service\"\n\nconst api = process.env.REACT_APP_ACCUWEATHER_API\nconst storageKey = 'cityNames'\nconst apiUrl = `https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${api}&q=`\n\nexport const cityService = {\n    query\n}\n\n\nasync function query(searchTxt) {\n    //Caching from local storage if available\n    const cachedSearch = localStorageService.loadFromStorage(storageKey) || {}\n\n    if (cachedSearch[searchTxt]) {\n        if ((Date.now() - cachedSearch[searchTxt].createdAt) < 1000 * 60 * 30) {\n            // console.log('Returned from cache')\n            return Promise.resolve(cachedSearch[searchTxt].data)\n        }\n    }\n\n    //Request from API\n    try {\n        const searchResults = await axios.get(`${apiUrl}${searchTxt}`)\n        // console.log('Returned from API')\n\n        cachedSearch[searchTxt] = {\n            createdAt: Date.now(),\n            data: searchResults.data.map(data => { return { value: data.Key, label: data.LocalizedName, country: data.Country.LocalizedName } })\n        }\n        //Saving to cache\n        localStorageService.saveToStorage(storageKey, cachedSearch)\n        return searchResults.data.map(data => { return { value: data.Key, label: data.LocalizedName, country: data.Country.LocalizedName } })\n    } catch {\n        alertMessage('Oops! Something went wrong', 'danger', 2000)\n    }\n}\n","import React, { useCallback, useRef, useState } from 'react'\nimport { cityService } from '../services/city.service';\nimport debounce from \"lodash.debounce\";\nimport { MdFavoriteBorder, MdFavorite } from \"react-icons/md\";\nimport Tooltip from '@mui/material/Tooltip';\nimport { alertMessage } from '../services/alert.service';\nimport { useSelector } from 'react-redux';\n\n\nexport const WeatherTopBar = ({ onChooseCity, onToggleFavourite, isFavourite, isCelcius, setIsCelcius }) => {\n    const isDarkMode = useSelector(state => state.themeModule.isDarkMode)\n\n    const [searchResults, setSearchResults] = useState()\n    const inputRef = useRef()\n\n    //Change handler for the search input\n    const changeHandler = async (ev) => {\n        if (ev.target.value) {\n            try {\n\n                const searchResults = await cityService.query(ev.target.value)\n                setSearchResults(searchResults)\n                return\n            } catch {\n                alertMessage('Oops! Something went wrong', 'danger', 2000)\n            }\n        }\n        setSearchResults(null)\n    }\n\n    //Debounce to prevent multiple API calls\n    const debouncedChangeHandler = useCallback(debounce(changeHandler, 300), [])\n\n\n    const chooseCity = (res) => {\n        onChooseCity({ cityKey: res.value, cityName: res.label })\n        inputRef.current.value = ''\n        setSearchResults(null)\n    }\n\n    const onClearInput = () => {\n\n        //Prevent immediate invoke of blur (<li> onClick will happen first)\n        setTimeout(() => {\n            setSearchResults(null)\n            inputRef.current.value = ''\n        }, 500)\n    }\n\n    const onSetDegreesType = (boolean) => {\n        setIsCelcius(boolean)\n        alertMessage(`Degrees are now shown in ${boolean ? 'Celcius' : 'Fahrenheit'}`, 'info', 2500)\n    }\n\n    return (\n        <section className=\"weather-top-bar\">\n            <form>\n                <input onBlur={onClearInput} ref={inputRef} name=\"searchTxt\"\n                    onChange={(ev) => { debouncedChangeHandler(ev) }}\n                    type=\"text\" placeholder=\"Search city\" className={`${searchResults ? 'on-focus' : ''} ${isDarkMode ? 'dark-mode' : ''} city-search`} />\n                {searchResults && <div className={`${isDarkMode ? 'dark-mode' : ''} search-list`}><ul>{searchResults.map(res => <li key={res.value} onClick={() => { chooseCity(res) }}>{res.label}, {res.country}</li>)}</ul></div>}\n            </form>\n            <div className=\"top-bar-tools-container\">\n\n                {!isFavourite &&\n                    <Tooltip type=\"button\" title=\"Save to favourites\" arrow placement=\"top\"><div className=\"icon-container\"><MdFavoriteBorder onClick={onToggleFavourite} className=\"favourite-icon\" /></div></Tooltip>\n                }\n                {isFavourite &&\n                    <Tooltip type=\"button\" title=\"Remove from favourites\" arrow placement=\"top\"><div className=\"icon-container\"><MdFavorite onClick={onToggleFavourite} className=\"favourite-icon\" /></div></Tooltip>\n                }\n                {isCelcius &&\n                    <Tooltip type=\"button\" title=\"Change to fahrenheit\" arrow placement=\"top\"><h3 onClick={() => { onSetDegreesType(false) }}>C°</h3></Tooltip>\n                }\n                {!isCelcius &&\n                    <Tooltip type=\"button\" title=\"Change to celcius\" arrow placement=\"top\"><h3 onClick={() => { onSetDegreesType(true) }}>F°</h3></Tooltip>\n                }\n            </div>\n        </section>\n    )\n}\n\n\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { utilService } from '../services/util.service'\n\n\nexport const WeeklyWeatherPreview = ({ currDay, isCelcius }) => {\n\n    const isDarkMode = useSelector(state => state.themeModule.isDarkMode)\n\n    return (\n        <div className={`${isDarkMode ? 'dark-mode' : ''} weekly-weather-preview`}>\n            <h4>{currDay.date}</h4>\n            <img src={`https://developer.accuweather.com/sites/default/files/${(currDay.icon < 10) ? '0' + currDay.icon : currDay.icon}-s.png`} alt=\"\" />\n            <h4>{isCelcius ? currDay.temperature : utilService.celToFer(currDay.temperature)}°</h4>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { WeeklyWeatherPreview } from './WeeklyWeatherPreview'\n\nexport const WeeklyWeather = ({ isCelcius }) => {\n\n    const currCityFiveDaysDetails = useSelector(state => state.weatherModule.currCityFiveDaysDetails)\n    const isDarkMode = useSelector(state => state.themeModule.isDarkMode)\n\n    return (\n        <section className={`${isDarkMode ? 'dark-mode' : ''} weekly-weather`}>\n            <h2 className={isDarkMode ? 'dark-mode' : ''}>Next 5 days...</h2>\n            <div className=\"weekly-weather-preview-container\">\n\n                {currCityFiveDaysDetails.map(currDay => <WeeklyWeatherPreview isCelcius={isCelcius} key={currDay.date} currDay={currDay} />)}\n\n            </div>\n        </section>\n    )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { TodayWeather } from './TodayWeather'\nimport { WeatherTopBar } from './WeatherTopBar'\nimport { WeeklyWeather } from './WeeklyWeather'\n\nexport const WeatherContent = ({ onChooseCity, onToggleFavourite, isFavourite, setIsCelcius, isCelcius }) => {\n\n    const isDarkMode = useSelector(state => state.themeModule.isDarkMode)\n\n    return (\n        <div className={`${isDarkMode ? 'dark-mode' : ''} weather-content-container main-layout `}>\n            <WeatherTopBar isCelcius={isCelcius} setIsCelcius={setIsCelcius} onChooseCity={onChooseCity} onToggleFavourite={onToggleFavourite} isFavourite={isFavourite} />\n            <TodayWeather isCelcius={isCelcius} />\n            <WeeklyWeather isCelcius={isCelcius} />\n        </div>\n    )\n}\n","import axios from \"axios\"\nimport { alertMessage } from \"./alert.service\"\nimport { localStorageService } from \"./storage.service\"\nimport { utilService } from \"./util.service\"\n\nconst currWeatherStorageKey = 'cityWeather'\nconst fiveDaysWeatherStorageKey = 'cityDailyForecast'\nconst favouritesStorageKey = 'favouriteCities'\nconst geoLocationStorageKey = 'geoLocation'\nconst apiKey = process.env.REACT_APP_ACCUWEATHER_API\n\nexport const weatherService = {\n    cityCurrentWeatherQuery,\n    cityFiveDaysWeatherQuery,\n    toggleFavourite,\n    favouriteCitiesQuery,\n    geoLocationQuery\n}\n\nasync function cityCurrentWeatherQuery({ cityKey, cityName }) {\n    //Caching from local storage if available\n    const cachedCityWeather = localStorageService.loadFromStorage(currWeatherStorageKey) || {}\n\n    if (cachedCityWeather[cityKey]) {\n        if ((Date.now() - cachedCityWeather[cityKey].createdAt) < 1000 * 60 * 30) {\n            // console.log('Returned from cache')\n            return Promise.resolve(cachedCityWeather[cityKey].data)\n        }\n    }\n    //Loading from API\n    try {\n        const cityDetails = await axios.get(`http://dataservice.accuweather.com/currentconditions/v1/${cityKey}?apikey=${apiKey}`)\n        cachedCityWeather[cityKey] = {\n            data: {\n                cityKey,\n                cityName,\n                cityData: cityDetails.data[0]\n            },\n            createdAt: Date.now()\n        }\n        localStorageService.saveToStorage(currWeatherStorageKey, cachedCityWeather)\n        // console.log('Returned from API')\n        return cachedCityWeather[cityKey].data\n    } catch (err) {\n        alertMessage('Oops! Something went wrong', 'danger', 2000)\n    }\n\n}\n\nasync function cityFiveDaysWeatherQuery(cityKey) {\n    const cachedCityFiveDayWeather = localStorageService.loadFromStorage(fiveDaysWeatherStorageKey) || {}\n    if (cachedCityFiveDayWeather[cityKey]) {\n        if ((Date.now() - cachedCityFiveDayWeather[cityKey].createdAt) < 1000 * 60 * 30) {\n            // console.log('Returned from cache')\n            return Promise.resolve(cachedCityFiveDayWeather[cityKey].data)\n        }\n    }\n\n    //Loading from API\n    try {\n        const cityFiveDaysDetails = await axios.get(`http://dataservice.accuweather.com/forecasts/v1/daily/5day/${cityKey}?apikey=${apiKey}`)\n        cachedCityFiveDayWeather[cityKey] = {\n            data: cityFiveDaysDetails.data.DailyForecasts.map(currDay => {\n                return {\n                    date: utilService.getFormattedDay(currDay.EpochDate),\n                    temperature: utilService.ferToCel(((currDay.Temperature.Minimum.Value + currDay.Temperature.Maximum.Value) / 2)),\n                    icon: currDay.Day.Icon\n                }\n            }),\n            createdAt: Date.now()\n        }\n        // console.log('Returned from API')\n        localStorageService.saveToStorage(fiveDaysWeatherStorageKey, cachedCityFiveDayWeather)\n\n        return cachedCityFiveDayWeather[cityKey].data\n    } catch (err) {\n        alertMessage('Oops! Something went wrong', 'danger', 2000)\n    }\n}\n\nasync function geoLocationQuery({ lat, lng }) {\n    const lastGeoLoc = localStorageService.loadFromStorage(geoLocationStorageKey) || {}\n    if (Date.now() - lastGeoLoc.createdAt < 1000 * 60 * 30) {\n        // console.log('Returned from cache')\n        return Promise.resolve(lastGeoLoc)\n    }\n\n    //Loading from API\n    try {\n        const geoLocDetails = await axios.get(`http://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=${apiKey}&q=${lat}%2C${lng}`)\n        const detailsObj = {\n            createdAt: Date.now(),\n            cityKey: geoLocDetails.data.Key,\n            cityName: geoLocDetails.data.LocalizedName\n        }\n        localStorageService.saveToStorage(geoLocationStorageKey, detailsObj)\n        return detailsObj\n    } catch (err) {\n        alertMessage('Oops! Something went wrong', 'danger', 2000)\n    }\n\n}\n\n\nfunction favouriteCitiesQuery() {\n    const favouriteCities = localStorageService.loadFromStorage(favouritesStorageKey) || {}\n    return favouriteCities\n}\n\n\n\nfunction toggleFavourite(cityData) {\n    const favouriteCities = localStorageService.loadFromStorage(favouritesStorageKey) || {}\n\n    //Checking wether the city exists in local storage favourites\n    if (favouriteCities[cityData.cityKey]) {\n        delete favouriteCities[cityData.cityKey]\n        localStorageService.saveToStorage(favouritesStorageKey, favouriteCities)\n        alertMessage(`${cityData.cityName} removed from favourites`, 'info', 2500)\n        return false\n    } else {\n        favouriteCities[cityData.cityKey] = cityData.cityName\n        localStorageService.saveToStorage(favouritesStorageKey, favouriteCities)\n        alertMessage(`${cityData.cityName} saved to favourites`, 'success', 2500)\n        return true\n    }\n}\n\n","import { alertMessage } from \"../../services/alert.service\"\nimport { weatherService } from \"../../services/weather.service\"\n\nexport const loadCityWeather = (cityDetails) => {\n    return async dispatch => {\n        try {\n            const cityData = await weatherService.cityCurrentWeatherQuery(cityDetails)\n            dispatch({\n                type: 'SET_CURR_CITY',\n                cityData\n            })\n            return cityData\n        } catch (err) {\n            alertMessage('Oops! Something went wrong', 'danger', 2000)\n        }\n    }\n}\n\nexport const loadCityFiveDaysWeather = (cityKey) => {\n    return async dispatch => {\n        try {\n            const daysData = await weatherService.cityFiveDaysWeatherQuery(cityKey)\n            dispatch({\n                type: 'SET_CURR_CITY_FIVE_DAY',\n                daysData\n            })\n            return daysData\n        } catch (err) {\n            alertMessage('Oops! Something went wrong', 'danger', 2000)\n        }\n    }\n}","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useLocation, useParams } from 'react-router'\nimport { Header } from '../components/Header'\nimport { WeatherContent } from '../components/WeatherContent'\nimport { alertMessage, removeMessage } from '../services/alert.service'\nimport { weatherService } from '../services/weather.service'\nimport { loadCityFiveDaysWeather, loadCityWeather } from '../store/actions/weather.action'\n\n\nexport const WeatherApp = () => {\n    const currCity = useSelector(state => state.weatherModule.currCity)\n    const isDarkMode = useSelector(state => state.themeModule.isDarkMode)\n    const favouriteCities = weatherService.favouriteCitiesQuery()\n    const [isFavourite, setIsfavourite] = useState()\n    const [isCelcius, setIsCelcius] = useState(true)\n\n    const dispatch = useDispatch()\n    const { cityKey } = useParams()\n    const { search } = useLocation()\n\n    useEffect(() => {\n        let defaultLocAlert\n        //User came from favourites page\n        if (cityKey) {\n            dispatch(loadCityWeather({ cityKey, cityName: search.split('=')[1] }))\n            dispatch(loadCityFiveDaysWeather(cityKey))\n            alertMessage(`Current location: ${search.split('=')[1]}`, 'info', 2500)\n            return\n        }\n\n        //Getting user's location\n        if (!currCity) {\n\n            navigator.geolocation.getCurrentPosition(async (position) => {\n                let lat = position.coords.latitude;\n                let lng = position.coords.longitude;\n\n                if (lat && lng) {\n                    try {\n                        const cityDetails = await weatherService.geoLocationQuery({ lat, lng })\n                        dispatch(loadCityWeather({ cityKey: cityDetails.cityKey, cityName: cityDetails.cityName }))\n                        dispatch(loadCityFiveDaysWeather(cityDetails.cityKey))\n                        alertMessage(`Showing your current location: ${cityDetails.cityName}`, 'info', 2500)\n                        if (defaultLocAlert) {\n                            removeMessage(defaultLocAlert)\n                        }\n                        return\n                    } catch (err) {\n                        alertMessage('Oops! Something went wrong', 'danger', 2000)\n                    }\n                }\n            })\n        }\n        //Default initial location\n        if (!currCity) {\n            dispatch(loadCityWeather({ cityKey: 215854, cityName: 'Tel Aviv' }))\n            dispatch(loadCityFiveDaysWeather(215854))\n            defaultLocAlert = alertMessage('Default location set to Tel Aviv', 'info', 2500)\n        }\n    }, [])\n\n    //Checking wether current city is saved as favourite\n    useEffect(() => {\n        if (currCity) {\n            if (currCity.cityKey) {\n                setIsfavourite(favouriteCities[currCity.cityKey] ? true : false)\n            }\n        }\n    }, [currCity])\n\n\n    //Dispatching choosen city from list to the reducer\n    const onChooseCity = (cityData) => {\n        dispatch(loadCityWeather(cityData))\n        dispatch(loadCityFiveDaysWeather(cityData.cityKey))\n        alertMessage(`Showing ${cityData.cityName}'s weather`, 'info', 2500)\n    }\n\n    //Add / remove from favourites\n    const onToggleFavourite = () => {\n        const isToggled = weatherService.toggleFavourite(currCity)\n        setIsfavourite(isToggled)\n    }\n\n    return (\n        <main className={`${isDarkMode ? 'dark-mode' : ''} weather-app`}>\n            <Header />\n            <WeatherContent setIsCelcius={setIsCelcius} isCelcius={isCelcius} onChooseCity={onChooseCity} onToggleFavourite={onToggleFavourite} isFavourite={isFavourite} />\n        </main>\n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { alertMessage } from '../services/alert.service'\nimport { weatherService } from '../services/weather.service'\n\nexport const PreviewFavourites = ({ cityInfo }) => {\n\n    const [cityDetails, setCityDetails] = useState()\n    const isDarkMode = useSelector(state => state.themeModule.isDarkMode)\n\n    useEffect(() => {\n\n        const loadCityData = async () => {\n            try {\n                const cityDetails = await weatherService.cityCurrentWeatherQuery({ cityKey: cityInfo[0], cityName: cityInfo[1] })\n                setCityDetails(cityDetails)\n            } catch {\n                alertMessage('Oops! Something went wrong', 'danger', 2000)\n            }\n        }\n        loadCityData()\n\n    }, [cityInfo])\n\n    if (!cityDetails) return <h1>Loading...</h1>\n    return (\n        <Link to={`/${cityInfo[0]}?name=${cityInfo[1]}`}><div className={`${isDarkMode ? 'dark-mode' : ''} favourites-preview`} >\n            <h2 className=\"favourites-preview-name\">{cityDetails.cityName}</h2>\n            <h4 className=\"favourites-preview-temp\">{cityDetails.cityData.Temperature.Metric.Value}°</h4>\n            <img src={`https://developer.accuweather.com/sites/default/files/${(cityDetails.cityData.WeatherIcon < 10) ? '0' + cityDetails.cityData.WeatherIcon : cityDetails.cityData.WeatherIcon}-s.png`} alt=\"\" />\n            <h4 className=\"favourites-preview-text\">{cityDetails.cityData.WeatherText}</h4>\n        </div></Link>\n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { weatherService } from '../services/weather.service'\nimport { PreviewFavourites } from './PreviewFavourites'\n\nexport const FavouritesList = () => {\n    const isDarkMode = useSelector(state => state.themeModule.isDarkMode)\n    const [favouriteCities, setFavouriteCities] = useState()\n\n    useEffect(() => {\n        const favouriteCities = weatherService.favouriteCitiesQuery()\n        setFavouriteCities(Object.entries(favouriteCities))\n    }, [])\n\n\n    return (\n        <div className={`${isDarkMode ? 'dark-mode' : ''} favourite-list main-layout`}>\n            {(favouriteCities?.length === 0 || !favouriteCities) && <h2 className=\"favourites-title\">No favourite cities to show</h2>}\n            {favouriteCities && favouriteCities.map(city => <PreviewFavourites key={city[0]} cityInfo={city} />)}\n        </div>\n    )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { FavouritesList } from '../components/FavouritesList'\nimport { Header } from '../components/Header'\n\nexport const Favourites = () => {\n    const isDarkMode = useSelector(state => state.themeModule.isDarkMode)\n\n    return (\n        <div className={`${isDarkMode ? 'dark-mode' : ''} favourites-container`}>\n            <Header />\n            <FavouritesList />\n        </div>\n    )\n}\n","import { BrowserRouter as Router } from 'react-router-dom'\nimport { Route, Switch } from 'react-router';\nimport { WeatherApp } from './pages/WeatherApp';\nimport { Favourites } from './pages/Favourites';\n\n\nexport const App = () => {\n  return (\n    <Router>\n\n      <Switch>\n        <Route exact path=\"/favourites\" component={Favourites} />\n        <Route exact path=\"/:cityKey\" component={WeatherApp} />\n        <Route exact path=\"/\" component={WeatherApp} />\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App;\n","import { localStorageService } from \"../../services/storage.service\"\n\nconst initialState = {\n    isDarkMode: localStorageService.loadFromStorage('isDarkMode') || true\n}\n\nexport const themeReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        case 'SET_THEME':\n            return state = { isDarkMode: !state.isDarkMode }\n        default:\n            return state\n    }\n}","const initialState = {\n    currCity: null,\n    currCityFiveDaysDetails: []\n}\n\nexport const weatherReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        case 'SET_CURR_CITY':\n            return state = { ...state, currCity: action.cityData }\n        case 'SET_CURR_CITY_FIVE_DAY':\n            return state = { ...state, currCityFiveDaysDetails: action.daysData }\n        default:\n            return state\n    }\n}","import { createStore, applyMiddleware, combineReducers, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport { themeReducer } from './reducers/theme.reducer';\nimport { weatherReducer } from './reducers/weather.reducer';\n\n\n\n\n\n\nconst rootReducer = combineReducers({\n    weatherModule: weatherReducer,\n    themeModule: themeReducer\n})\n\n\n// export const store = createStore(rootReducer, applyMiddleware(thunk))\n// window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__();\n// Lets wire up thunk and also redux-dev-tools:\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\n// export const store = createStore(rootReducer, applyMiddleware(thunk))\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport { store } from './store/store';\nimport './styles/style.scss'\n\n//Notifications\nimport ReactNotification from 'react-notifications-component'\nimport \"animate.css\"\nimport 'react-notifications-component/dist/theme.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ReactNotification />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}